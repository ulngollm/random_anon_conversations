from dotenv import load_dotenv
from pyrogram import Client
from pyrogram.handlers import MessageHandler, CallbackQueryHandler
from pyrogram import filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import os


load_dotenv()
API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
BOT_API_TOKEN = os.getenv('BOT_API_TOKEN')

app = Client('bot', API_ID, API_HASH, bot_token=BOT_API_TOKEN)


def start(client: Client, message: Message):
    message.reply(
        '–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å –≤–∞—Å –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏. \n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton(
                "–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞",
                callback_data="search:%d" % message.from_user.id
            )
        ]])
    )


def set_status_inactive(client: Client, message: Message):
    message.reply(
        '–í—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–∏—Å–∫, –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
    )


def init_search(client: Client, message: Message):
    message.reply(
        '–°–µ–π—á–∞—Å –Ω–∞–π–¥–µ–º –≤–∞–º –ø–∞—Ä—É –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏...'
    )
    # todo search
    message.reply(
        '–ú—ã –Ω–∞—à–ª–∏ –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ —É–≤–µ–¥–æ–º–∏–ª–∏ –µ–≥–æ. –í—Å–µ, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –µ–º—É üîΩ'
    )


def quit_conversation(client: Client, message: Message):
    message.reply(
        '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞?',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton(
                "–î–∞",
                callback_data="quit:%d" % message.from_user.id
            ),
            InlineKeyboardButton(
                "–ù–µ—Ç",
                callback_data="continue:%d" % message.from_user.id
            ),
        ]])
    )


def close_conversation(client: Client, callback_query: CallbackQuery):
    callback_query.message.reply(
        '–û–∫–µ–π, –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ú–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.'
    )

def search_button(client: Client, callback_query: CallbackQuery):
    init_search(client, callback_query.message)


def send_message(client: Client, message: Message):
    has_open_conversation = False
    # todo –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥
    # todo –µ—Å–ª–∏ –µ—Å—Ç—å, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
    # –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ 
    if not has_open_conversation:
        message.reply(
            '–£ –≤–∞—Å —Å–µ–π—á–∞—Å –Ω–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "–ù–∞–π—Ç–∏",
                    callback_data="search:%d" % message.from_user.id
                ),
                InlineKeyboardButton(
                    "–ü–æ–¥–æ–∂–¥—É, –ø–æ–∫–∞ –º–Ω–µ –Ω–∞–ø–∏—à—É—Ç",
                    callback_data="wait:%d" % message.from_user.id
                )
            ]])
        )


def continue_conversation(client: Client, callback_query: CallbackQuery):
    callback_query.answer('–û–∫! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É.')


app.add_handler(MessageHandler(start, filters.command(['start'])))
app.add_handler(MessageHandler(set_status_inactive, filters.command(['freeze'])))
app.add_handler(MessageHandler(init_search, filters.command(['search'])))
app.add_handler(MessageHandler(quit_conversation, filters.command(['quit'])))
app.add_handler(CallbackQueryHandler(close_conversation, filters.regex('quit:(\d*)')))
app.add_handler(CallbackQueryHandler(continue_conversation, filters.regex('continue:(\d*)')))

app.add_handler(CallbackQueryHandler(search_button, filters.regex('search:(\d*)')))
app.add_handler(MessageHandler(send_message, filters.text))


app.run()