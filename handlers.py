from pyrogram import Client
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from db.queries import user as user_manager, match as match_manager
from user import UserStatus

def start(client: Client, message: Message):
    user = user_manager.find(message.from_user.id)
    if user == None:
        user_manager.add(message.from_user.id)
        message.reply(
            '–ü—Ä–∏–≤–µ—Ç! \n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞",
                    callback_data="search:%d" % message.from_user.id
                )
            ]])
        )
        return

    user_manager.set_status(message.from_user.id, UserStatus.ACTIVE)
    message.reply(
            '–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è. –¢–µ–ø–µ—Ä—å –≤–∞–º –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å. \n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞",
                    callback_data="search:%d" % message.from_user.id
                )
            ]])
        )


def set_status_inactive(client: Client, message: Message):
    user_manager.set_status(message.from_user.id, UserStatus.FREEZED)
    message.reply(
        '–í—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–∏—Å–∫, –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
    )


def init_search(client: Client, message: Message, user = None):
    message.reply(
        '–°–µ–π—á–∞—Å –Ω–∞–π–¥–µ–º –≤–∞–º –ø–∞—Ä—É –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏...'
    )
    user = message.from_user if not user else user 
    user_status = user_manager.find(user.id)[2]
    if user_status == UserStatus.BUSY:
        message.reply(
            '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –µ–≥–æ –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /quit.'
        )
        return

    match = match_manager.search_match(user.id, UserStatus.ACTIVE)
    if match == None:
        message.reply(
            '–ú—ã –ø–æ–∫–∞ –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –û–Ω–∏ –≤—Å–µ –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.'
        )
        return
    
    user_manager.set_status(user.id, UserStatus.BUSY)
    client.send_message(
        match, 
        '–ú—ã –Ω–∞—à–ª–∏ –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞! –í—Å–µ, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –µ–º—É üîΩ'
    )
    message.reply(
        '–ú—ã –Ω–∞—à–ª–∏ –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ —É–≤–µ–¥–æ–º–∏–ª–∏ –µ–≥–æ. –í—Å–µ, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –µ–º—É üîΩ'
    )


def quit_conversation(client: Client, message: Message):
    message.reply(
        '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞?',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton(
                "–î–∞",
                callback_data="quit:%d" % message.from_user.id
            ),
            InlineKeyboardButton(
                "–ù–µ—Ç",
                callback_data="continue:%d" % message.from_user.id
            ),
        ]])
    )


def close_conversation(client: Client, callback_query: CallbackQuery):
    match_manager.close_current_conversation(callback_query.from_user.id)
    user_manager.set_status(callback_query.from_user.id, UserStatus.ACTIVE)
    callback_query.message.reply(
        '–û–∫–µ–π, –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ú–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.'
    )

def search_button(client: Client, callback_query: CallbackQuery):
    init_search(client, callback_query.message, callback_query.from_user)


def send_message(client: Client, message: Message):
    open_conversation = match_manager.get_active_conversation(message.from_user.id)
    # todo –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥
    # todo –µ—Å–ª–∏ –µ—Å—Ç—å, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
    # –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ 
    if not open_conversation:
        message.reply(
            '–£ –≤–∞—Å —Å–µ–π—á–∞—Å –Ω–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞',
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(
                        "–ù–∞–π—Ç–∏",
                        callback_data="search:%d" % message.from_user.id
                    )
                ],
                [   
                    InlineKeyboardButton(
                        "–ü–æ–¥–æ–∂–¥—É, –ø–æ–∫–∞ –º–Ω–µ –Ω–∞–ø–∏—à—É—Ç",
                        callback_data="wait:%d" % message.from_user.id
                    )
                ]
            ])
        )
        return
    
    match_id = open_conversation[0] if open_conversation[0] != message.from_user.id else open_conversation[1]
    client.send_message(
        match_id,
        message.text
    )

def continue_conversation(client: Client, callback_query: CallbackQuery):
    callback_query.answer('–û–∫! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É.')


def wait_invite(client: Client, callback_query: CallbackQuery):
    callback_query.answer('–û–∫! –ö–∞–∫ —Å–∫–∞–∂–µ—Ç–µ.')